pipeline {
    agent any

    tools {
        maven 'maven'      // Use your Maven tool name from Global Tool Configuration
        jdk 'jdk22'        // Use your JDK tool name from Global Tool Configuration
    }

    parameters {
        choice(name: 'host', choices: ['local', 'grid'], description: 'Choose where to run tests')
        string(name: 'GRID_URL', defaultValue: '', description: 'Grid URL (only required if host is grid)')
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Execution environment')
        string(name: 'TagName', defaultValue: '', description: 'Execution tag name')
        choice(name: 'HEADLESS_MODE', choices: ['true', 'false'], description: 'Enable headless mode')
        string(name: 'branch', defaultValue: 'main', description: 'Git branch to build from')
        string(name: 'MRS_VALUE', defaultValue: '', description: 'MRS value')
        string(name: 'MRT_VALUE', defaultValue: '', description: 'MRT value')
    }

    options {
        timestamps()
        skipDefaultCheckout(true)
    }

    environment {
        DOMAIN = ''
    }

    stages {
        stage('Setup Domain') {
            steps {
                script {
                    if (env.GIT_URL && env.GIT_URL.contains('visa')) {
                        env.DOMAIN = "IS-${params.TagName ?: ''}"
                    }
                }
            }
        }

        stage('Print Tool Versions') {
            steps {
                script {
                    if (isUnix()) {
                        sh 'mvn -v'
                        sh 'java -version'
                    } else {
                        bat 'mvn -v'
                        bat 'java -version'
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: params.branch]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'WipeWorkspace']
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Mrshaik-hub/visaSlotMonitoring.git',
                        credentialsId: 'your_git_credentials'
                    ]]
                ])
            }
        }

        stage('Start in Local or Grid') {
            when { expression { params.host != 'grid' } }
            steps {
                echo 'Skipping BrowserStack setup for local runs (no need)'
            }
        }

        stage('Run Visa Slot Monitoring Script') {
            steps {
                script {
                    try {
                        echo 'Starting Visa Slot Monitoring Script'
                        if (isUnix()) {
                            sh """
                                mvn clean install \\
                                  -Denvironment=${params.ENVIRONMENT} \\
                                  -DtagName=${params.TagName} \\
                                  -DheadlessMode=${params.HEADLESS_MODE} \\
                                  -Dhost=${params.host} \\
                                  -DgridURL=${params.GRID_URL} \\
                                  -Dmrs=${params.MRS_VALUE} \\
                                  -Dmrt=${params.MRT_VALUE}
                            """
                        } else {
                            bat """
                                mvn clean install ^
                                  -Denvironment=${params.ENVIRONMENT} ^
                                  -DtagName=${params.TagName} ^
                                  -DheadlessMode=${params.HEADLESS_MODE} ^
                                  -Dhost=${params.host} ^
                                  -DgridURL=${params.GRID_URL} ^
                                  -Dmrs=${params.MRS_VALUE} ^
                                  -Dmrt=${params.MRT_VALUE}
                            """
                        }
                        echo 'Visa Slot Monitoring Completed'
                    } catch (e) {
                        echo "Visa Slot Monitoring Failed: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Generate and Publish Reports') {
            steps {
                script {
                    try {
                        def reportFile = 'target/cucumber-html-reports/overview-features.html'
                        if (!fileExists(reportFile)) {
                            echo("Report file not found: ${reportFile}")
                            writeFile file: 'summary_report.html', text: """
                                <html><body>
                                  <h2>No Report Found</h2>
                                  <p>The expected report file <b>${reportFile}</b> was not generated.</p>
                                  <p>Test Execution Tag: <b>${params.TagName}</b></p>
                                  <p>Test Environment: <b>${params.ENVIRONMENT}</b></p>
                                  <p>Please check the test logs for more details.</p>
                                  <p>Thank you.</p>
                                </body></html>
                            """
                            archiveArtifacts artifacts: 'summary_report.html', fingerprint: true
                        } else {
                            def reportHtml = readFile(reportFile)
                            def tableMatch = (reportHtml =~ /<table[\s\S]*?<\/table>/)
                            def table = tableMatch.find() ? tableMatch[0] : '<p>No table found in report!</p>'
                            if (table instanceof java.util.regex.Matcher) {
                                table = '<p>No table found in report!</p>'
                            }
                            table = table
                                .replaceAll(/<table\b[^>]*>/, '<table border="1" style="border-collapse: collapse; width: 100%;">')
                                .replaceAll(/<td\b[^>]*>/, '<td border="1">')
                                .replaceAll(/<a\b[^>]*>/, '')
                                .replaceAll(/<\/a>/, '')

                            writeFile file: 'summary_report.html', text: """
                                <html><body>
                                  <h2>Note: Please download attachment for full report</h2>
                                  <p>Test Execution Tag: <b>${params.TagName}</b></p>
                                  <p>Test Environment: <b>${params.ENVIRONMENT}</b></p>
                                  ${table}
                                  <p>Kindly contact your Automation Team for questions.</p>
                                  <p>Thank you.</p>
                                </body></html>
                            """
                            archiveArtifacts artifacts: 'summary_report.html', fingerprint: true
                        }
                    } catch (err) {
                        echo "Report generation failed: ${err.getMessage()}"
                        writeFile file: 'summary_report.html', text: """
                            <html><body>
                              <h2>Report Generation Failed</h2>
                              <p>Error: ${err.getMessage()}</p>
                              <p>Test Execution Tag: <b>${params.TagName}</b></p>
                              <p>Test Environment: <b>${params.ENVIRONMENT}</b></p>
                              <p>Please check the test logs for more details.</p>
                              <p>Thank you.</p>
                            </body></html>
                        """
                        archiveArtifacts artifacts: 'summary_report.html', fingerprint: true
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }

  stage('Archive and Publish Report') {
      steps {
        script {
          // Archive the report file
          archiveArtifacts artifacts: 'test-output/index.html', fingerprint: true

          // Publish the HTML report to Jenkins UI
          publishHTML(target: [
            reportName : 'Test Report',
            reportDir  : 'test-output',
            reportFiles: 'index.html',
            keepAll    : true,
            alwaysLinkToLastBuild: true
          ])
        }
      }
    }

    post {
        always {
            script {
                def status = currentBuild.result ?: 'SUCCESS'
                def reportLink = "${env.BUILD_URL}artifact/summary_report.html"
                echo "Build completed with status: ${status}"

                try {
                    emailext(
                        to: 'shaikmahaboobsubhani00@gmail.com',
                        subject: "Visa Slot Monitor - Execution Summary | Build #${env.BUILD_NUMBER} | ${status}",
                        body: """
                            <html>
                              <body>
                                <h2>Visa Slot Monitoring - Execution Summary</h2>
                                <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 100%;">
                                  <tr><th>Execution Tag</th><td>${params.TagName}</td></tr>
                                  <tr><th>Environment</th><td>${params.ENVIRONMENT}</td></tr>
                                  <tr><th>Branch</th><td>${params.branch}</td></tr>
                                  <tr><th>MRS Value</th><td>${params.MRS_VALUE}</td></tr>
                                  <tr><th>MRT Value</th><td>${params.MRT_VALUE}</td></tr>
                                  <tr><th>Host</th><td>${params.host}</td></tr>
                                  <tr><th>Headless Mode</th><td>${params.HEADLESS_MODE}</td></tr>
                                  <tr><th>Status</th><td><b style="color:${status == 'SUCCESS' ? 'green' : 'red'};">${status}</b></td></tr>
                                </table>
                                <br/>
                                <p>Full Report: <a href="${reportLink}">Click here to view the complete HTML report</a></p>
                                <br/>
                                <p>Kindly contact <b>hshaik</b> for any queries.</p>
                                <p>Thanks,<br/>Jenkins</p>
                              </body>
                            </html>
                        """,
                        mimeType: 'text/html',
                        attachLog: true
                    )
                } catch (emailErr) {
                    echo "Email sending failed: ${emailErr.getMessage()}"
                }
            }
        }
    }
}
